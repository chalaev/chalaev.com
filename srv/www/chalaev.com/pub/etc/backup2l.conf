#  -*-coding: utf-8;-*-
# Time-stamp: <2016-11-23 14:23 EST by Oleg SHALAEV http://chalaev.com >
# This is my configuration for the backup2l program which I use for encrypted daily backups.
# The archive directory is /home/backup/ (must exist)
# Its subdirectory /home/backup/cloud/ (must exist) is syncronyzed with yandex-disk cloud
# Only gpg-encrypted files are stored in /home/backup/cloud/
# so neither cloud owners, nor "Men in Black" can not use my data in any way.
# The gpg-key (must exist and) is selected by the line:
GPG_KEY=chalaev@work

# I use yandex-disk fr cloud storage.
# Note 1: yandex-disk client becomes available once I
# create (one-line) /etc/apt/sources.list.d/yandex-disk.list file:
# deb http://repo.yandex.ru/yandex-disk/deb/ stable main
# and download the repository key
# wget http://repo.yandex.ru/yandex-disk/YANDEX-DISK-KEY.GPG -O- | apt-key add -
# Note 2: any closed-source program must be used with caution.
# I restrict yandex-disk with apparmor, see profile
# http://www.chalaev.com/pub/etc/apparmor.d/usr.bin.yandex-disk
# Note 3: I do not like the idea of syncing between different computers using a cloud;
# this is why I wrote https://github.com/chalaev/esy

FOR_VERSION=1.4
VOLNAME="shalaev"
SRCLIST=(/home/shalaev /home/www /home/mail-ru-cloud/рисунки)
SKIPCOND=( ! \( \( -group keepOneYear  -mtime -365 \) -o \( -group keepTwoYears -mtime -730 \) -o -group important  \) \( -group tmp -o -not -type f -o -name "*~" -o -name "*.abw.SAVED" -o -iname "*.ac3" -o -name "*.afm" -o -name "*.aux" -o -iname "*.avi" -o -name "*.bak" -o -path "*/batch*.me/*"  -o -path "*/batch/*" -o -name "*.bbl" -o -name "*.blg" -o -iname "*.brf" -o -iname "*.bst" -o -name "*.gz" -o -name "*.bz2" -o -name "*.chm" -o -name "*.cp" -o -name "*.cps"  -path "*/Downloads/*" -o -name "*.dat" -o -name "*.deb" -o -name "*.dvi" -o -name "*.dv"  -o -path "*/elib/*" -o -name "*.eps"  -o -name "*.fb2"  -o -name "*.fn" -o -name "*.fls" -o -iname "*.fdb_latexmk" -o -iname "*.img" -o -iname "*.iso" -o -name "*.gpg"  -path "*/gPodder/*" -o -name "*.gpx" -o -iname "*.iso.segments"  -o -iname "*.ky" -o -ipath "*/local*/*" -o -iname "*.man"  -o -iname "*.md" -o -iname "*.mjpeg" -o -iname "*.mov"  -o -iname "*.mpg" -o -iname "*.mkv" -o -iname "*.jpg" -o \( ! \( -path "*/рисунки/*" -o -path "*/home/www/*"  -o -path "*/programming/projects/*" \) \( -iname "*.jpeg"  -o -name "*.png" \) \) -o -name "*.log"  -o -iname "*.mp3" -o -iname "*.mp4" -o -iname "*.m2v" -o -path "*/Music/*" -o -iname "*.ogg" -o -ipath "*/*old*/*" -o -name "*.ogm" -o -name "*.out" -o -name "*.part" -o -name "*.pbm" -o -name "*.pdf" -o -name "*.pfb" -o -name "*.pg" -o -name "*.pgm"  -o -name "*.pid" -o -name "*.pnm" -o -name "*.pod" -o -name "*.ps" -o -iname "*.rar" -o -iname "*.raw" -o -name "*.tar.gz" -o -name "*.tbz" -o -name "*.tgz" -o -name "*.tga"  -o -iname "*.tif" -o -iname "*.tiff" -o -iname "*tmp*" -o -name "*.toc" -o -name "*.tp" -o -iname "*.vob" -o -iname "*.vr" -o -iname "*.wav" -o -name "*.xcf" -o -name "*.xml" -o -name "*.xz" -o -name "*.Z" -o -name "*.zip" -o -path "*/.*/*" -o -name random_seed -o -name .bash_history  -o -name .recently-used  -o -name .xsession-errors -o -ipath "*/Maps/*" -o -path "/mnt/*" -o -ipath "*/backup/*"   -o -ipath "*/*tmp*/*"  -o -path "*/_region_.prv/*"  -o -path "*/js-lib/*" -o -path "*/fonts/*" \) )

BACKUP_DIR="/home/backup"
MAX_LEVEL=3
# MAX_PER_LEVEL=8  <-- means ~3 months between 2nd-level archives which is too much for me:
MAX_PER_LEVEL=7
MAX_FULL=5

# For differential backups: number of generations to keep per level;
# old backups are removed such that at least GENERATIONS * MAX_PER_LEVEL
# recent versions are still available for the respective level
GENERATIONS=1

# If the following variable is 1, a check file is automatically generated
CREATE_CHECK_FILE=1

##################################################
# Pre-/Post-backup functions

# This user-defined bash function is executed before a backup is made
PRE_BACKUP ()
{
    # On a Debian system, the following statements dump a machine-readable list of
    # all installed packages to a file.
echo "  writing dpkg selections to package.list..."
dpkg --get-selections | diff - /home/backup/package.list > /dev/null || dpkg --get-selections > /home/backup/package.list
find /home/backup/ -type l -exec ls -lh {} \;  | diff - /home/backup/links.list > /dev/null || find /home/backup/ -type l -exec ls -lh {} \; > /home/backup/links.list
chmod a+r /home/backup/links.list /home/backup/package.list
touch /home/backup/starting-backup.tmp
}

# This user-defined bash function is executed after a backup is made
POST_BACKUP ()
{
newArch=$(find /home/backup/ -maxdepth 1 -type f -newer /home/backup/starting-backup.tmp -name "*.gpg")
rm /home/backup/starting-backup.tmp
find /home/backup/ -maxdepth 1 -type f -name "TMP*" -exec rm {} \;
# The directory /home/backup/cloud/ is synchronized with yandex-disk:
mv $newArch  /home/backup/cloud/
cd /home/backup/
ln -s cloud/$(basename $newArch) .
find . -xtype l -exec rm {} \;
cd -
for i in  /home/backup/cloud/*.gpg ; do if [ ! -r /home/backup/`basename $i .tar.gpg`.new.gz ] ; then rm $i ; fi ; done
}


##################################################
# Misc.

# Create a backup when invoked without arguments?
AUTORUN=0

# Size units
SIZE_UNITS="M"    # set to "B", "K", "M" or "G" to obtain unified units in summary list

# Remove this line after the setup is finished.
#UNCONFIGURED=1

# Archive driver for new backups (optional, default = "DRIVER_TAR_GZ")
# CREATE_DRIVER="DRIVER_MY_AFIOZ"
CREATE_DRIVER="DRIVER_TAR_GPG"
#CREATE_DRIVER="DRIVER_TAR_BZ2"


##################################################
# User-defined archive drivers (optional)


# This section demonstrates how user-defined archive drivers can be added.
# The example shows a modified version of the "afioz" driver with some additional parameters
# one may want to pass to afio in order to tune the speed, archive size etc. .
# An archive driver consists of a bash function named
# "DRIVER_<your-driver-name>" implementing the (sometimes simple) operations "-test", "-suffix",
# "-create", "-toc", and "-extract".

# If you do not want to write your own archive driver, you can remove the remainder of this file.

# This driver uses tar and pipes the output trough gnupg.
# You need to set GPG_KEY to the ID Key to use, with no passphrase. You have to
# invoke gpg at least one time and setup your identity and a second identity with no
# passphrase before backup because gnupg has to initiate
# first thing in the home directory.

USER_DRIVER_LIST="DRIVER_TAR_GPG"  # uncomment to register the driver(s) below (optional)
DRIVER_TAR_GPG ()
{
    case $1 in
    -test)
        require_tools tar gpg
        echo "ok"
        ;;
        -suffix)
            echo "tar.gpg"
            ;;
        -create)        # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            tar -c -T $4 --no-recursion | /usr/bin/gpg --homedir ~shalaev/.gnupg --batch --no-tty -q -r $GPG_KEY --encrypt -  > $3
#            chmod o-rwx $3
            ;;
        -toc)           # Arguments: $2 = BID, $3 = archive file name
            /usr/bin/gpg --batch --no-tty -q -d $3 2>/dev/null | tar t | sed 's#^#/#'
            ;;
        -extract)       # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
             /usr/bin/gpg --batch --no-tty -q -d $3 2>/dev/null | tar -x --same-permission --same-owner -T $4 2>&1
            ;;
    esac
}


# USER_DRIVER_LIST="DRIVER_MY_AFIOZ"  # uncomment to register the driver(s) below (optional)

DRIVER_MY_AFIOZ ()
{
    case $1 in
        -test)
            # This function should check whether all prerequisites are met, especially if all
            # required tools are installed. This prevents backup2l to fail in inconvenient
            # situations, e. g. during a backup or restore operation. If everything is ok, the
            # string "ok" should be returned. Everything else is interpreted as a failure.
            require_tools afio
                # The function 'require_tools' checks for the existence of all tools passed as
                # arguments. If one of the tools is not found by which(1), an error message is
                # displayed and the function does not return.
            echo "ok"
            ;;
        -suffix)
            # This function should return the suffix of backup archive files. If the driver
            #Дdoes not create a file (e. g. transfers the backup data immediately to a tape
            # or network device), an empty string has to be returned. backup2l uses this suffix
            # to select a driver for unpacking. If a user-configured driver supports the same
            # suffix as a built-in driver, the user driver is preferred (as in this case).
            echo "afioz"
            ;;
        -create)        # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            # This function is called to create a backup file. The argument $3 is the full file
            # name of the archive file including path and suffix. $4 contains a list of files
            # (full pathname) to be backed up. Directories are not contained, they are handled
            # by backup2l directly without using the driver. All output to stderr should be
            # directed to stdout ("2>&1").
            afio -Zo -G 9 -M 30m -T 2k $3 < $4 2>&1
                # This line passes some additional options to afio (see afio(1)):
                # '-G 9' maximizes the compression by gzip.
                # '-M 30m' increases the size of the internal file buffer. Larger files have to
                #     be compressed twice.
                # '-T 2k' prevents the compression of files smaller than 2k in order to save time.
            ;;
        -toc)           # Arguments: $2 = BID, $3 = archive file name
            # This function is used to validate the correct generation of an archive file.
            # The output is compared to the list file passed to the '-create' function.
            # Any difference is reported as an error.
            afio -Zt $3 | sed 's#^#/#'
                # The sed command adds a leading slash to each entry.
            ;;
        -extract)       # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            # This function is called by backup2l's restore procedure for each archive.
            # It is extremely important that only those files contained in $4 are restored.
            # Otherwise it may happen that files are overwritten by incorrect (e. g. older)
            # versions of the same file.
            afio -Zinw $4 $3 2>&1
            ;;
    esac
}



##################################################
# More sample archive drivers (optional)

# This is an unordered collection of drivers that may be useful for you,
# either to use them directly or to derive own drivers.


# Here's a version of the standard DRIVER_TAR_GZ driver,
# modified to split the output archive file into multiple sections.
# (donated by Michael Moedt)
DRIVER_TAR_GZ_SPLIT ()
{
    case $1 in
        -test)
            require_tools tar split cat
            echo "ok"
            ;;
        -suffix)
            echo "tgz_split"
            ;;
        -create)        # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            mkdir -p ${3}
            tar cz -T $4 --no-recursion | split --bytes=725100100 - ${3}/part_
            ;;
        -toc)           # Arguments: $2 = BID, $3 = archive file name
            cat ${3}/part_* | tar tz | sed 's#^#/#'
            ;;
        -extract)       # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            cat ${3}/part_* | tar xz --same-permission --same-owner -T $4 2>&1
            ;;
    esac
}


# This driver uses afio and bzip2, where bzip2 is invoked by afio.
# (donated by Carl Staelin)
DRIVER_MY_AFIOBZ2 ()
{
    case $1 in
        -test)
            require_tools afio bzip2
            echo "ok"
            ;;
        -suffix)
            echo "afio-bz2"
            ;;
        -create)        # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            afio -z -1 m -P bzip2 -Q -9 -Z -M 50m -T 1k - <$4 >$3 2>&1
                # This line passes some additional options to afio (see afio(1)):
                # '-P bzip2' utilizes bzip2 as an external compressor
                # '-Q 9' maximizes the compression by bzip2.
                # '-M 50m' increases the size of the internal file buffer. Larger files have to
                #     be compressed twice.
                # '-T 1k' prevents the compression of files smaller than 1k in order to save time.
            ;;
        -toc)           # Arguments: $2 = BID, $3 = archive file name
            afio -t -Z -P bzip2 -Q -d - <$3 | sed 's#^#/#'
                # The sed command adds a leading slash to each entry.
            ;;
        -extract)       # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            afio -Zinw $4 -P bzip2 -Q -d - <$3 2>&1
            ;;
    esac
}


# This driver uses afio and bzip2, such that the I/O stream is piped through bzip2.
# (donated by Carl Staelin)
DRIVER_MY_AFIO_BZ2 ()
{
    case $1 in
        -test)
            require_tools afio bzip2
            echo "ok"
            ;;
        -suffix)
            echo "afio.bz2"
            ;;
        -create)        # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            afio -o - < $4 | bzip2 --best > $3 2>&1
            ;;
        -toc)           # Arguments: $2 = BID, $3 = archive file name
            bzip2 -d < $3 | afio -t - | sed 's#^#/#'
                # The sed command adds a leading slash to each entry.
            ;;
        -extract)       # Arguments: $2 = BID, $3 = archive file name, $4 = file list file
            bzip2 -d < $3 | afio -inw $4 - 2>&1
            ;;
    esac
}
